AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a subnet, and accessible.
Parameters:
  AWSAccessKeyId:
    Type: String
    Description: The AWSAccessKeyId of the account
  AWSRegion:
    Type: String
    Default: ap-south-1
    Description: The AWSRegion of the service
  AWSSecretAccessKey:
    Type: String
    Description: The AWSSecretAccessKey of the account
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-06497f7165dfe49c6
    Description: The ID of the VPC in which to deploy the service.
  Subnet1Id:
    Type: String
    Default: subnet-0580c969fb854a2c8
    Description: The ID of the subnet in which to deploy the service.
  Subnet2Id:
    Type: String
    Default: subnet-09d2ec312c9d27762
    Description: The ID of the subnet in which to deploy the service.
  Subnet3Id:
    Type: String
    Default: subnet-0063b889498c400bf
    Description: The ID of the subnet in which to deploy the service.
  SecurityGroupId:
    Type: String
    Default: sg-0ce14a7d97f12c4f3
    Description: The ID of the security group to assign to the service.
  StackName:
    Type: String
    Default: EC2ContainerService-default
    Description: The name of the parent Fargate networking stack that you created. Necessary to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: allen-backend-services
    Description: A name for the service.
  ImageUrl:
    Type: String
    Default: allen-backend-services
    Description: The URL of a Docker image that contains the application process that will handle the traffic for this service.
  ContainerPort:
    Type: Number
    Default: 8000
    Description: The port number to which the application inside the Docker container is binding.
  ContainerCpu:
    Type: Number
    Default: 2048
    Description: The amount of CPU to allocate to the container. 1024 is equivalent to 1 CPU.
  ContainerMemory:
    Type: Number
    Default: 4096
    Description: The amount of memory in megabytes to allocate to the container.
  DesiredCount:
    Type: Number
    Default: 1
    Description: The desired number of copies of the service task to run.
  Role:
    Type: String
    Default: ''
    Description: (Optional) An IAM role to assign to the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc.


Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "allen_backend_cluster"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:*'
                  - 'ecs:*'
                  - 'logs:*'
                  - 'kms:Decrypt'
                  - 'ec2:*'
                  - 'rds:*'
                  - 's3:*'
                  - 'ssm:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'secretsmanager:GetSecretValue'
                  - 'servicediscovery:RegisterInstance'
                  - 'servicediscovery:DeregisterInstance'
                Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: allen-backend-services
          Image: !Ref 'ImageUrl'
          Cpu: 819
          Memory: 1536
          Essential: true
          DependsOn:
            - ContainerName: aws-otel-collector
              Condition: START
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/fargate/allenBackend'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'allen'
          PortMappings:
            - ContainerPort: 9000
              Name: "allen-backend-services-9000-tcp"
              Protocol: 'tcp'
              AppProtocol: 'grpc'
              HostPort: 9000
            - ContainerPort: 8000
              Name: "allen-backend-services-8000-tcp"
              Protocol: 'tcp'
              AppProtocol: 'http'
              HostPort: 8000
        - Name: aws-otel-collector
          Image: amazon/aws-otel-collector
          Cpu: 201
          Memory: 512
          Environment:
            - Name: 'AWS_ACCESS_KEY_ID'
              Value: !Ref 'AWSAccessKeyId'
            - Name: 'AWS_REGION'
              Value: !Ref 'AWSRegion'
            - Name: 'AWS_SECRET_ACCESS_KEY'
              Value: !Ref 'AWSSecretAccessKey'
          Essential: true
          Command:
            - "--config=/etc/ecs/ecs-default-config.yaml"
          PortMappings:
            - ContainerPort: 2000
              HostPort: 2000
              Protocol: udp
            - ContainerPort: 4317
              HostPort: 4317
              Protocol: tcp
            - ContainerPort: 8125
              HostPort: 8125
              Protocol: udp
            - ContainerPort: 4318
              HostPort: 4318
              Protocol: tcp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: '/fargate/allenBackend'
              awslogs-region: !Ref 'AWSRegion'
              awslogs-stream-prefix: 'aws-otel-collector'
          HealthCheck:
            Command:
              - "/healthcheck"
            Interval: 5
            Timeout: 6
            Retries: 5
            StartPeriod: 1

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Ref 'ServiceName'
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/q/services'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8000 # overriden when containers are attached
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref 'VpcId'


  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'ServiceName'
      Scheme: internet-facing
      Subnets:
        - !Ref 'Subnet1Id'
        - !Ref 'Subnet2Id'
      SecurityGroups:
        - !Ref 'SecurityGroupId'
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'ALB'
      Port: 8000
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref 'Subnet1Id'
            - !Ref 'Subnet2Id'
            - !Ref 'Subnet3Id'
          SecurityGroups:
            - !Ref 'SecurityGroupId'
      TaskDefinition: !Ref 'TaskDefinition'
